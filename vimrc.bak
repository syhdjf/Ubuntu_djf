".vimrc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"djf add for chinese language
set helplang=cn
"Get out of VI's compatible mode..
set nocompatible


"========================================================================
"
"  常规设置
"
"========================================================================
"------------------------------------------------------------------------
" 自动识别文件类型；用文件类型plugin脚本；使用缩进定义文件  
"------------------------------------------------------------------------
filetype on   
filetype plugin on   
if has("autocmd")     
       au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal g'\"" | endif     
       "have Vim load indentation rules and plugins according to the detected filetype     
       filetype plugin indent on
    filetype indent on  
endif  
"------------------------------------------------------------------------
" 自动加载和自动回写
"------------------------------------------------------------------------
" 设置当正在编辑的文件被外部的其它程序所修改后自动在Vim加载
if exists("&autoread")
    set autoread
endif  
" 自动把内容写回文件: 如果文件被修改过，在每个 :next、:rewind、:last、:first、:previous、:stop、:suspend、:tag、:!、:make、CTRL-] 和 CTRL-^命令时进行；
" 用 :buffer、CTRL-O、CTRL-I、'{A-Z0-9} 或 `{A-Z0-9} 命令转到别的文件时亦然。
set autowrite
"------------------------------------------------------------------------
" 可以为不同模式分别打开鼠标
"------------------------------------------------------------------------
"   "n” 普通模式
"   "v” 可视模式
"   "i” 插入模式
"   "c” 命令行模式
"   "h” 编辑帮助文件时,所有前面的模式
"   "a” 所有前面的模式
"   "r” hit-enter 和 more-prompt 提示时
if exists("&mouse")
    set mouse=a    " 使用鼠标这样设置后，不能用鼠标右键的”复制"了，解决方法，在复制之前，先按住Shift键
    "when you need to copy from vim, maybe you have to ':set mouse=' first
    "set mouse=
endif

" 选中状态下 Ctrl+c 复制
"map <C-v> "*pa
imap <C-v> <Esc>"*pa
imap <C-a> <Esc>^
imap <C-e> <Esc>$
vmap <C-c> "+y
set mouse=v

"--------------------------------------------------------------------------
"文件和备份，不需要，所以复位
"--------------------------------------------------------------------------
set nobackup
set nowritebackup

"------------------------------------------------------------------------
"文档格式
"------------------------------------------------------------------------
set expandtab       " 使用space代替tab.
set shiftwidth=4   " (自动) 缩进使用的4个空格，用于 "cindent”, ">>”, "<<” 等
set softtabstop=4  " 设置软制表符的宽度
set tabstop=4      " 设置制表符(tab键)的宽度
set smarttab
set autoindent     " 设置自动对齐(缩进)：即每行的缩进值与上一行相等；使用 noautoindent 取消设置 
set smartindent    " 智能对齐方式
set cindent        " 使用 C/C++ 语言的自动缩进方式   
set wrap
set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s     " 设置C/C++语言的具体缩进方式  

"Enable syntax highlight
syntax enable
"set colorscheme
"colorscheme elflord
colorscheme desert

set scrolloff=5    " 光标上下两侧最少保留的屏幕行数。这使你工作时总有一些可见的上下文。
set showmatch      " 设置匹配模式，显示匹配的括号
set hidden         " 没有保存的缓冲区可以自动被隐藏  
set number         " 显示行号   
"set previewwindow " 标识预览窗口  
set ambiwidth=double
"Set Tab=4 spaces
set ts=4
set lbr
set tw=500
set selection=inclusive
"Encoding settings
if has("multi_byte")
    " Set fileencoding priority
    if getfsize(expand("%")) > 0
        set fileencodings=ucs-bom,utf-8,cp936,big5,euc-jp,euc-kr,latin1
    else
        set fileencodings=cp936,big5,euc-jp,euc-kr,latin1
    endif
    " CJK environment detection and corresponding setting
    if v:lang =~ "^zh_CN"
        " Use cp936 to support GBK, euc-cn == gb2312
        set encoding=cp936
        set termencoding=cp936
        set fileencoding=cp936
    elseif v:lang =~ "^zh_TW"
        " cp950, big5 or euc-tw
        " Are they equal to each other?
        set encoding=big5
        set termencoding=big5
        set fileencoding=big5
    elseif v:lang =~ "^ko"
        " Copied from someone's dotfile, untested
        set encoding=euc-kr
        set termencoding=euc-kr
        set fileencoding=euc-kr
    elseif v:lang =~ "^ja_JP"
        " Copied from someone's dotfile, unteste
        set encoding=euc-jp
        set termencoding=euc-jp
        set fileencoding=euc-jp
    endif
    " Detect UTF-8 locale, and replace CJK setting if needed
    if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
        set encoding=utf-8
        set termencoding=utf-8
        set fileencoding=utf-8
    endif
else
    echoerr "Sorry, this version of (g)vim was not compiled with multi_byte"
endif




"""""""""""""""""""""""""""""""""""""
" VIM userinterface
"""""""""""""""""""""""""""""""""""""
"Set 7 lines to the curors away from the border- when moving vertical..
set so=7
"Turn on WiLd menu
set wildmenu "补全的时候，如果设置了 wildmenu，可以补全的内容就会显示在命令行的上方
" Ignore compiled files  
set wildignore=*.o,*~,*.pyc

"The commandbar is 2 high
set cmdheight=2
"Set backspace
set backspace=eol,start,indent
"Bbackspace and cursor keys wrap to
set whichwrap+=b,s,<,>,h,l,[,] "光标从行首和行末时可以跳到另一行去
"How many tenths of a second to blink
set mat=2
"imediately show the search result
set is

"""""""""""""""""""""""""""""""""""""
" Folding
"""""""""""""""""""""""""""""""""""""
"Enable folding, I find it very useful
set nofen
set fdl=0

"------------------------------------------------------------------------
"编辑操作
"------------------------------------------------------------------------
"set ignorecase    " 搜索模式里忽略大小写   
"set smartcase     " 如果搜索模式包含大写字符，不使用 'ignorecase' 选项。只有在输入搜索模式并且打开 'ignorecase' 选项时才会使用。
set linebreak      " 整词换行

"命令行设置 
set showcmd         " 命令行显示输入的命令   
set showmode        " 命令行显示vim当前模式   
"搜索设置   
set incsearch       
" 输入字符串就显示匹配点   
set hlsearch 
 
set history=50     " 历史记录50条 

set viminfo='1000,<500
filetype plugin indent on   " 加了这句才可以用智能补全
"set tags=～/Vim_tags/tags          " 设置tags文件的路径

"括号自动补全
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { {<CR>}<ESC>O
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
:inoremap " ""<ESC>i
:inoremap ' ''<ESC>i
function! ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
        return "\<Right>"
    else
        return a:char
    endif
endfunction

"--------------------------------------------------------------------------------
"状态栏相关的设置
"--------------------------------------------------------------------------------
set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]   " 状态栏的显示格式
set laststatus=2   " 总显示最后一个窗口的状态行；设为1则窗口数多于一个的时候显示最后一个窗口的状态行；0不显示最后一个窗口的状态行   
set ruler          " 标尺，用于显示光标位置的行号和列号，逗号分隔。每个窗口都有自己的标尺。如果窗口有状态行，标尺在那里显示。否则，它显示在屏幕的最后一行上。
set cul "高亮光标所在行
autocmd InsertEnter * se cul    " 用浅色高亮当前行"

"--------------------------------------------------------------------------------
"代码折叠
"--------------------------------------------------------------------------------
"set foldmarker={{{,}}}  " 指定折叠标志
"set foldmarker={,}       " 指定折叠标志
"syntax region functionFold start="/(^/({/|/S.*{/)$/n/)/@<=/_[^}]" end="/(^{.*/)/@<!$/n/(^}/)/@=" transparent fold
"syntax region commentFold start="/" transparent fold keepend
"syntax region commentFold2 start="^/(^//.*$/n/)/@<!//.*/(/n///)/@=$" end="^/(^//.*$/n/)/@<=//.*/(/n///)/@!$" transparent fold keepend

"set foldmethod=marker  " 标志用于指定折叠。
"set foldmethod=syntax   " 语法高亮项目指定折叠。
"set foldlevel=100       " 不要自动折叠
"set foldopen-=search   " 不要打开折叠，当搜索进它里面时
"set foldopen-=undo     " 不要打开折叠，当做撤销进它里面时
"set foldcolumn=4       " 如果非零，指定宽度的列在窗口的一侧显示，指示折叠的打开和关闭。最大值为12



"""""""""""""""""""""""""""""""""""""
"plugins
"""""""""""""""""""""""""""""""""""""

"********************************************************************************
"                                                                               
"  插件设置                                                                       
"cscope    ctags     omnicppcomplete        Taglist        QuickFix    MiniBufferExplorer       
"NERDTree    WinManager  A   c-support Ack
"-------------------------------------------------------------------------------
"快捷键设置                                                                       
"F2        自动补全代码                                                               
"F3        根据头文件补全代码                                                           
"F4        ack/ag                                                                   
"F5        打开cscope搜索结果                                                                   
"F6        关闭cscope搜索结果
"F7        切换到前一项
"F8        切换到后一项                                                       
"F9        Nerdtree 或者 WinManager                                                                    
"F10       系统占用
"F11
"F12       切换.c和.h文件                                                        
"Tag       C-X C-O 补全                                                               
"cscope检索                                                                       
"Ctrl+Shift+- 然后按s     查找本 C 符号(可以跳过注释)                                       
"Ctrl+Shift+- 然后按g     查找本定义                                                   
"Ctrl+Shift+- 然后按d     查找本函数调用的函数                                           
"Ctrl+Shift+- 然后按c     查找调用本函数的函数                                           
"Ctrl+Shift+- 然后按e     查找本 egrep 模式                                           
"Ctrl+Shift+- 然后按f      查找本文件                                                   
"Ctrl+Shift+- 然后按i      查找包含本文件的文件                                           
"********************************************************************************
"--    ctags setting    --
 " 按下F8重新生成tag文件，并更新taglist
    "map <F11> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
    "imap <F11> <ESC>:!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
    set tags=tags;
    set autochdir
    "set tags+=./tags "add current directory's generated tags file
    "set tags+=~/Vim_Tags/tags "add new tags file(刚刚生成tags的路径，在ctags -R 生成tags文件后，不要将tags移动到别的目录，否则ctrl+］时，会提示找不到源码文件)

"--    cscope setting    --
"用法：
"<1>、为源码建立一个cscope数据库
"lingd@ubuntu:~/arm/linux-2.6.28.7$ cscope -Rbq
"lingd@ubuntu:~/arm/linux-2.6.28.7$ ls cscope.*
"cscope.in.out  cscope.out  cscope.po.out
"<2>、用vim打开某个源码文件，末行模式下，输入“:cs add /home/../cscope.out home/..."，添加cscope数据库到vim。已将vim配置为启动时，自动添加当前目录下的cscope数据库
"<3>、完成前两步后，现在就可以用“cs find c”等Cscope查找命令查找关键字了。我们已在.vimrc中将“cs find c”等Cscope查找命令映射为<C-_>c等快捷键（按法是先按Ctrl+Shift+-, 然后很快按下c）
"-- Cscope setting --
    if has("cscope")
        set csprg=/usr/bin/cscope        " 指定用来执行cscope的命令
        set csto=0                        " 设置cstag命令查找次序：0先找cscope数据库再找标签文件；1先找标签文件再找cscope数据库
        set cst                            " 同时搜索cscope数据库和标签文件
        set cscopequickfix=s-,c-,d-,i-,t-,e-    " 使用QuickFix窗口来显示cscope查找结果
        set nocsverb
        if filereadable("cscope.out")    " 若当前目录下存在cscope数据库，添加该数据库到vim
            cs add cscope.out
        else "else search cscope.out elsewhere 
            let cscope_file=findfile("cscope.out", ".;")
            let cscope_pre=matchstr(cscope_file, ".*/")
            if !empty(cscope_file) && filereadable(cscope_file)
                exe "cs add" cscope_file cscope_pre
            endif
        endif
        set csverb
    endif
   
    " 将:cs find c等Cscope查找命令映射为<C-_>c等快捷键（按法是先按Ctrl+Shift+-, 然后很快再按下c）
    nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
    nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
    nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
    nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
    nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR> :copen<CR><CR>
    nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-_>i :cs find i <C-R>=expand("<cfile>")<CR><CR> :copen<CR><CR

"-- omnicppcomplete setting --
    set nocp
    " 按下F2自动补全代码，注意该映射语句后不能有其他字符，包括tab；否则按下F3会自动补全一些乱码
    imap <F2> <C-X><C-O>
    " 按下F3根据头文件内关键字补全
    imap <F3> <C-X><C-I>
    set completeopt=menu,menuone " 关掉智能补全时的预览窗口
    let OmniCpp_MayCompleteDot = 1 " autocomplete with .
    let OmniCpp_MayCompleteArrow = 1 " autocomplete with ->
    let OmniCpp_MayCompleteScope = 1 " autocomplete with ::
    let OmniCpp_SelectFirstItem = 2 " select first item (but don't insert)
    let OmniCpp_NamespaceSearch = 2 " search namespaces in this and included files
    let OmniCpp_ShowPrototypeInAbbr = 1 " show function prototype in popup window
    let OmniCpp_GlobalScopeSearch=1 " enable the global scope search
    let OmniCpp_DisplayMode=1 " Class scope completion mode: always show all members
    "let OmniCpp_DefaultNamespaces=["std"]
    let OmniCpp_ShowScopeInAbbr=1 " show scope in abbreviation and remove the last column
    let OmniCpp_ShowAccess=1


"-- Taglist setting --
    let Tlist_Auto_Open=0 "don't autopen
    let Tlist_Ctags_Cmd='ctags' "因为我们放在环境变量里，所以可以直接执行
    let Tlist_Use_Right_Window=0 "让窗口显示在右边，0的话就是显示在左边
    let Tlist_Show_One_File=0 "让taglist可以同时展示多个文件的函数列表
    let Tlist_File_Fold_Auto_Close=1 "非当前文件，函数列表折叠隐藏
    let Tlist_Exit_OnlyWindow=1 "当taglist是最后一个分割窗口时，自动推出vim
    "是否一直处理tags.1:处理;0:不处理
    let Tlist_Process_File_Always=1 "实时更新tags
    let Tlist_Inc_Winwidth=0



" -- MiniBufferExplorer setting--
    let g:miniBufExplMapWindowNavVim = 1 " 按下Ctrl+h/j/k/l，可以切换到当前窗口的上下左右窗口
    let g:miniBufExplMapWindowNavArrows = 1 " 按下Ctrl+箭头，可以切换到当前窗口的上下左右窗口
    let g:miniBufExplMapCTabSwitchBufs = 1 " 启用以下两个功能：Ctrl+tab移到下一个buffer并在当前窗口打开；Ctrl+Shift+tab移到上一个buffer并在当前窗口打开；ubuntu好像不支持
    "let g:miniBufExplMapCTabSwitchWindows = 1 " 启用以下两个功能：Ctrl+tab移到下一个窗口；Ctrl+Shift+tab移到上一个窗口；ubuntu好像不支持
    let g:miniBufExplModSelTarget = 1    " 不要在不可编辑内容的窗口（如TagList窗口）中打开选中的buffer
    let g:miniBufExplForceSyntaxEnable = 1
    let g:minibufExplorerMoreThanOne=2

"--NERDTree setting--
    let g:NERDTree_title="[NERDTree]" 
    "let g:winManagerWindowLayout="NERDTree|TagList" 
     
    function! NERDTree_Start() 
        exec 'NERDTree' 
    endfunction 
     
    function! NERDTree_IsValid() 
        return 1 
    endfunction 
     
"-- WinManager setting --
    let g:winManagerWindowLayout='FileExplorer|TagList' " 设置我们要管理的插件
    let g:persistentBehaviour=0 " 如果所有编辑文件都关闭了，退出vim
    nmap <F9> :WMToggle<cr>


"-- A setting --
    nnoremap <silent> <F12> :A<CR>

"-- Ack setting --
"need install 
"sudo apt-get install ack-grep
"sudo dpkg-divert --local --divert /usr/bin/ack --rename --add /usr/bin/ack-grep
"apt-get install silversearcher-ag

    " Use the the_silver_searcher if possible (much faster than Ack)
    if executable('ag')
        "let g:ackprg = 'ag --vimgrep'
        let g:ackprg = 'ag --nogroup --nocolor --column'
    endif

    "! 表示搜索后不自动跳转到第一项
    vnoremap <silent> <F4> :call VisualSelection()<CR>

"-- c-support setting --
 "解压，有c-support、ftplugin、doc、plugin四个文件，拷贝到$HOME/.vim/目录下。并在.vimrc中用命令filetype plugin on激活插件功能。
 "功能一：自动为*.c文件添加文件头说明
 "$ vim ~/.vim/c-support/templates/Templates 可改变头说明
 "快捷键帮助信息详见doc的pdf文档


"-- QuickFix --
map <F5> :copen<CR>
map <F6> :cclose<CR>
map <F7> :cp<CR>
map <F8> :cn<CR>



function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction 

function! VisualSelection() range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    call CmdLine("Ack! " . l:pattern)
    let @/ = l:pattern
    let @" = l:saved_reg
endfunction
